[{
  "_id": "mheTYzWaPP9u9y84G",
  "expression": "undirected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x: Node | x in x.adj.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": false,
  "createdShorterPath": false,
  "sourceExpr": "all n : Node | n in n.adj.adj",
  "sourceAST": "{all{one of{var0}{sig/Node}}{in{var0/Node}{.{.{var0/Node}{field/adj{set of{sig/Node}}}}{field/adj{set of{sig/Node}}}}}}",
  "targetExpr": "all disj n1, n2 :Node | n1 in n2.adj implies n2 in n1.adj",
  "targetAST": "{all{disj}{one of{var0}{sig/Node}}{all{disj}{one of{var1}{sig/Node}}{=>{in{var0/Node}{.{var1/Node}{field/adj{set of{sig/Node}}}}}{in{var1/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}}}",
  "nextExpr": "all disj n1, n2 :Node | n1 in n2.adj implies n2 in n1.adj",
  "nextAST": "{all{disj}{one of{var0}{sig/Node}}{all{disj}{one of{var1}{sig/Node}}{=>{in{var0/Node}{.{var1/Node}{field/adj{set of{sig/Node}}}}}{in{var1/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}}}",
  "totalTED": 14,
  "srcDstTED": 14,
  "operations": [
    "(type='Insert', node=disj, parent=all, position=0)",
    "(type='Insert', node=all, parent=all, position=2)",
    "(type='Insert', node=disj, parent=all, position=0)",
    "(type='TreeInsert', tree='{one of{var1}{sig/Node}}', parent=all, position=1)",
    "(type='Update', node=in, value==>)",
    "(type='Move', tree='{in{var0/Node}{.{.{var0/Node}{field/adj{set of{sig/Node}}}}{field/adj{set of{sig/Node}}}}}', parent=all, position=2)",
    "(type='Insert', node=in, parent=in, position=0)",
    "(type='Insert', node=in, parent=in, position=1)",
    "(type='Move', tree='{var0/Node}', parent=in, position=0)",
    "(type='Move', tree='{.{var0/Node}{field/adj{set of{sig/Node}}}}', parent=in, position=1)",
    "(type='Insert', node=var1/Node, parent=in, position=0)",
    "(type='Insert', node=., parent=in, position=1)",
    "(type='Update', node=var0/Node, value=var1/Node)",
    "(type='Insert', node=var0/Node, parent=., position=0)",
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=., position=1)",
    "(type='Delete', node=.)"
  ],
  "hint": "Keep going! You can use variables to help specify the condition. Consider introducing a new variable \"disj\" to your expression using the universal quantifier ('all').",
  "time": "0",
  "model_id": "mMLvPt63wrQgnmTpC"
},{
  "_id": "jxa7g6Ez86XfQcbRP",
  "expression": "noLoops",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x, y: Node | x in y.(^adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": true,
  "createdShorterPath": false,
  "sourceExpr": "all x, y: Node | x in y.(^adj)",
  "sourceAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var0/Node}{.{var1/Node}{^{field/adj{set of{sig/Node}}}}}}}}",
  "targetExpr": "all x, y: Node | x in y.adj implies x != y",
  "targetAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{=>{in{var0/Node}{.{var1/Node}{field/adj{set of{sig/Node}}}}}{!={var0/Node}{var1/Node}}}}}",
  "nextExpr": "all x, y: Node | x in y.adj implies x != y",
  "nextAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{=>{in{var0/Node}{.{var1/Node}{field/adj{set of{sig/Node}}}}}{!={var0/Node}{var1/Node}}}}}",
  "totalTED": 5,
  "srcDstTED": 5,
  "operations": [
    "(type='Insert', node==>, parent=all, position=1)",
    "(type='Move', tree='{in{var0/Node}{.{var1/Node}{^{field/adj{set of{sig/Node}}}}}}', parent==>, position=0)",
    "(type='TreeInsert', tree='{!={var0/Node}{var1/Node}}', parent==>, position=1)",
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=., position=1)",
    "(type='Delete', node=^)"
  ],
  "hint": "Keep going! You can use variables to help specify the condition. Consider introducing a new variable \"=>\" to your expression using the universal quantifier ('all').",
  "time": "493",
  "model_id": "fe9tagC4DG2e4vfW3"
},{
  "_id": "uzisPAEEk4JxQ2mbj",
  "expression": "noLoops",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x, y: Node | x not in y.(^adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": true,
  "createdShorterPath": false,
  "sourceExpr": "all x, y: Node | x not in y.(^adj)",
  "sourceAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{!in{var0/Node}{.{var1/Node}{^{field/adj{set of{sig/Node}}}}}}}}",
  "targetExpr": "all n : Node | n not in n.adj",
  "targetAST": "{all{one of{var0}{sig/Node}}{!in{var0/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}",
  "nextExpr": "all n : Node | n not in n.adj",
  "nextAST": "{all{one of{var0}{sig/Node}}{!in{var0/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}",
  "totalTED": 6,
  "srcDstTED": 6,
  "operations": [
    "(type='Move', tree='{!in{var0/Node}{.{var1/Node}{^{field/adj{set of{sig/Node}}}}}}', parent=all, position=1)",
    "(type='Update', node=var1/Node, value=var0/Node)",
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=., position=1)",
    "(type='Delete', node=^)",
    "(type='TreeDelete', tree='{one of{var1}{sig/Node}}')",
    "(type='Delete', node=all)"
  ],
  "hint": "Keep going! It seems like you have unnecessary elements in your expression. You can try simplifying your expression by deleting the transitive closure operator ('^'). If you want to keep it, try to fix your expression another way and reach a different solution!",
  "time": "92",
  "model_id": "9RJ94kAbcsK9LNB8Z"
},{
  "_id": "E3PfMN78Yz8XzLZ3G",
  "expression": "noLoops",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x, y: Node | x not in y.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": true,
  "createdShorterPath": false,
  "sourceExpr": "all x, y: Node | x not in y.(adj)",
  "sourceAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{!in{var0/Node}{.{var1/Node}{field/adj{set of{sig/Node}}}}}}}",
  "targetExpr": "all n : Node | n not in n.adj",
  "targetAST": "{all{one of{var0}{sig/Node}}{!in{var0/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}",
  "nextExpr": "all n : Node | n not in n.adj",
  "nextAST": "{all{one of{var0}{sig/Node}}{!in{var0/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}",
  "totalTED": 5,
  "srcDstTED": 5,
  "operations": [
    "(type='Move', tree='{!in{var0/Node}{.{var1/Node}{field/adj{set of{sig/Node}}}}}', parent=all, position=1)",
    "(type='Update', node=var1/Node, value=var0/Node)",
    "(type='TreeDelete', tree='{one of{var1}{sig/Node}}')",
    "(type='Delete', node=all)"
  ],
  "hint": "Keep going! It seems like you have unnecessary elements in your expression. You can try simplifying your expression by deleting the one of. If you want to keep it, try to fix your expression another way and reach a different solution!",
  "time": "92",
  "model_id": "na2PkGF9TqfgackYL"
},{
  "_id": "MJbJgm4jj4NixytYP",
  "expression": "noLoops",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": false,
  "createdShorterPath": false,
  "sourceExpr": "all n:Node | n not in n.^adj",
  "sourceAST": "{all{one of{var0}{sig/Node}}{!in{var0/Node}{.{var0/Node}{^{field/adj{set of{sig/Node}}}}}}}",
  "targetExpr": "all n : Node | n not in n.adj",
  "targetAST": "{all{one of{var0}{sig/Node}}{!in{var0/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}",
  "nextExpr": "all n : Node | n not in n.adj",
  "nextAST": "{all{one of{var0}{sig/Node}}{!in{var0/Node}{.{var0/Node}{field/adj{set of{sig/Node}}}}}}",
  "totalTED": 1,
  "srcDstTED": 1,
  "operations": [
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=., position=1)",
    "(type='Delete', node=^)"
  ],
  "hint": "One step away from the solution! It seems like you have unnecessary elements in your expression. You can try simplifying your expression by deleting the transitive closure operator ('^'). If you want to keep it, try to fix your expression another way and reach a different solution!",
  "time": "0",
  "model_id": "khTxWkATZg3psAgNx"
},{
  "_id": "9hn8MNw38pFF7s63r",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x: Node | x in x.(^adj)\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": false,
  "createdShorterPath": true,
  "sourceExpr": "all n:Node | n in n.^adj",
  "sourceAST": "{all{one of{var0}{sig/Node}}{in{var0/Node}{.{var0/Node}{^{field/adj{set of{sig/Node}}}}}}}",
  "targetExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "nextExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "totalTED": 7,
  "srcDstTED": 7,
  "operations": [
    "(type='Update', node=var0/Node, value=sig/Node)",
    "(type='Insert', node=*, parent=., position=1)",
    "(type='Insert', node=+, parent=*, position=0)",
    "(type='TreeInsert', tree='{field/adj{set of{sig/Node}}}', parent=+, position=0)",
    "(type='Update', node=^, value=~)",
    "(type='Move', tree='{^{field/adj{set of{sig/Node}}}}', parent=+, position=1)"
  ],
  "hint": "Keep going! Consider adding a reflexive-transitive closure operator ('*') to get the reflexive-transitive closure of a relation. Think about how you can incorporate this within the dot join operator ('.') expression.",
  "time": "269",
  "model_id": "6jorhSam5ukoiR2t2"
},{
  "_id": "985ZAPEbqD3zc6vHS",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x: Node | x in x.(*adj)\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": false,
  "createdShorterPath": true,
  "sourceExpr": "all n : Node | n in n.*adj",
  "sourceAST": "{all{one of{var0}{sig/Node}}{in{var0/Node}{.{var0/Node}{*{field/adj{set of{sig/Node}}}}}}}",
  "targetExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "nextExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "totalTED": 6,
  "srcDstTED": 6,
  "operations": [
    "(type='Update', node=var0/Node, value=sig/Node)",
    "(type='Insert', node=+, parent=*, position=0)",
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=+, position=0)",
    "(type='TreeInsert', tree='{~{field/adj{set of{sig/Node}}}}', parent=+, position=1)"
  ],
  "hint": "Keep going! Consider adding a union operator ('+') to combine two sets. Think about how you can incorporate this within the reflexive-transitive closure operator ('*') expression.",
  "time": "136",
  "model_id": "ghWP3fu5qkS8cvCdv"
},{
  "_id": "ExwWjFajoTQzHrjGR",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x: Node | x in x.(^adj)\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": false,
  "createdShorterPath": false,
  "sourceExpr": "all n:Node | n in n.^adj",
  "sourceAST": "{all{one of{var0}{sig/Node}}{in{var0/Node}{.{var0/Node}{^{field/adj{set of{sig/Node}}}}}}}",
  "targetExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "nextExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "totalTED": 7,
  "srcDstTED": 7,
  "operations": [
    "(type='Update', node=var0/Node, value=sig/Node)",
    "(type='Insert', node=*, parent=., position=1)",
    "(type='Insert', node=+, parent=*, position=0)",
    "(type='TreeInsert', tree='{field/adj{set of{sig/Node}}}', parent=+, position=0)",
    "(type='Update', node=^, value=~)",
    "(type='Move', tree='{^{field/adj{set of{sig/Node}}}}', parent=+, position=1)"
  ],
  "hint": "Keep going! Consider adding a reflexive-transitive closure operator ('*') to get the reflexive-transitive closure of a relation. Think about how you can incorporate this within the dot join operator ('.') expression.",
  "time": "0",
  "model_id": "yAmEEMeieg7JG3voj"
},{
  "_id": "kvMvorLuGiXddc7sG",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x: Node | x in x.(^adj) || (no x.adj)\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": true,
  "createdShorterPath": false,
  "sourceExpr": "all x: Node | x in x.(^adj) || (no x.adj)",
  "sourceAST": "{all{one of{var0}{sig/Node}}{OR{in{var0/Node}{.{var0/Node}{^{field/adj{set of{sig/Node}}}}}}{no{.{var0/Node}{field/adj{set of{sig/Node}}}}}}}",
  "targetExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "nextExpr": "all x : Node | Node in x.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{in{sig/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}",
  "totalTED": 11,
  "srcDstTED": 11,
  "operations": [
    "(type='Update', node=OR, value=in)",
    "(type='Update', node=var0/Node, value=sig/Node)",
    "(type='Move', tree='{var0/Node}', parent=OR, position=0)",
    "(type='Insert', node=., parent=OR, position=1)",
    "(type='Move', tree='{var0/Node}', parent=., position=0)",
    "(type='Insert', node=*, parent=., position=1)",
    "(type='Insert', node=+, parent=*, position=0)",
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=+, position=0)",
    "(type='Update', node=., value=~)",
    "(type='Move', tree='{.{var0/Node}{field/adj{set of{sig/Node}}}}', parent=+, position=1)",
    "(type='Delete', node=var0/Node)",
    "(type='Delete', node=^)",
    "(type='Delete', node=.)",
    "(type='Delete', node=in)",
    "(type='Delete', node=no)"
  ],
  "hint": "Keep going! Consider adding a dot join operator ('.') to perform a relational join between sets or relations. Think about how you can incorporate this within the disjunction operator ('or') expression.",
  "time": "188",
  "model_id": "zgiFoFzXxXi3NGjXq"
},{
  "_id": "JX9ADwvTmbNtjiPgS",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x, y: Node | y in x.(^adj)\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": false,
  "createdShorterPath": true,
  "sourceExpr": "all a,b:Node | b in a.^adj",
  "sourceAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{^{field/adj{set of{sig/Node}}}}}}}}",
  "targetExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "nextExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "totalTED": 6,
  "srcDstTED": 6,
  "operations": [
    "(type='Insert', node=*, parent=., position=1)",
    "(type='Insert', node=+, parent=*, position=0)",
    "(type='TreeInsert', tree='{field/adj{set of{sig/Node}}}', parent=+, position=0)",
    "(type='Update', node=^, value=~)",
    "(type='Move', tree='{^{field/adj{set of{sig/Node}}}}', parent=+, position=1)"
  ],
  "hint": "Keep going! Consider adding a reflexive-transitive closure operator ('*') to get the reflexive-transitive closure of a relation. Think about how you can incorporate this within the dot join operator ('.') expression.",
  "time": "114",
  "model_id": "EowtHQuChS4sBuyCp"
},{
  "_id": "6cEL5LSDgsR3PHupH",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x, y: Node | y in x.(*adj)\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": false,
  "createdShorterPath": true,
  "sourceExpr": "all n1,n2: Node | n2 in n1.*adj",
  "sourceAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{field/adj{set of{sig/Node}}}}}}}}",
  "targetExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "nextExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "totalTED": 5,
  "srcDstTED": 5,
  "operations": [
    "(type='Insert', node=+, parent=*, position=0)",
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=+, position=0)",
    "(type='TreeInsert', tree='{~{field/adj{set of{sig/Node}}}}', parent=+, position=1)"
  ],
  "hint": "Keep going! Consider adding a union operator ('+') to combine two sets. Think about how you can incorporate this within the reflexive-transitive closure operator ('*') expression.",
  "time": "118",
  "model_id": "DEoqYroXsatQjAEhE"
},{
  "_id": "EpoyRn6AQvGdeWPjx",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x, y: Node | (y in x.(*adj)) || (x in y.(*adj))\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": true,
  "createdShorterPath": false,
  "sourceExpr": "all x, y: Node | (y in x.(*adj)) || (x in y.(*adj))",
  "sourceAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{OR{in{var1/Node}{.{var0/Node}{*{field/adj{set of{sig/Node}}}}}}{in{var0/Node}{.{var1/Node}{*{field/adj{set of{sig/Node}}}}}}}}}",
  "targetExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "nextExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "totalTED": 12,
  "srcDstTED": 12,
  "operations": [
    "(type='Update', node=OR, value=in)",
    "(type='Move', tree='{var1/Node}', parent=OR, position=0)",
    "(type='Insert', node=., parent=OR, position=1)",
    "(type='Move', tree='{var0/Node}', parent=., position=0)",
    "(type='Insert', node=*, parent=., position=1)",
    "(type='Insert', node=+, parent=*, position=0)",
    "(type='Move', tree='{field/adj{set of{sig/Node}}}', parent=+, position=0)",
    "(type='Update', node=*, value=~)",
    "(type='Move', tree='{*{field/adj{set of{sig/Node}}}}', parent=+, position=1)",
    "(type='Delete', node=*)",
    "(type='Delete', node=.)",
    "(type='Delete', node=in)",
    "(type='Delete', node=var0/Node)",
    "(type='Delete', node=var1/Node)",
    "(type='Delete', node=.)",
    "(type='Delete', node=in)"
  ],
  "hint": "Keep going! Consider adding a dot join operator ('.') to perform a relational join between sets or relations. Think about how you can incorporate this within the disjunction operator ('or') expression.",
  "time": "91",
  "model_id": "upPj7ZCZy76anNmjN"
},{
  "_id": "StZPmd8uNCyzjba9W",
  "expression": "weaklyConnected",
  "code": "/* \nEach node as a set of outgoing edges, representing a directed graph without multiple edged.\n*/\nsig Node {\n\tadj : set Node\n}\n\n/*\nThe graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html\n*/\npred undirected {\n\tall x, y: Node |  y in x.adj => x in y.adj\n}\n\n/*\nThe graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html\n*/\npred oriented {\n\tall x, y: Node |  y in x.adj => not (x in y.adj)\n}\n\n/*\nThe graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html\n*/\npred acyclic {\n\tall x: Node | x not in x.(^adj)\n}\n\n/*\nThe graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html\n*/\npred complete {\n\tall x, y: Node | x in y.adj\n}\n\n/*\nThe graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html\n*/\npred noLoops {\n\t\tall x: Node | x not in x.(adj)\n}\n\n/*\nThe graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html\n*/\npred weaklyConnected {\n\tall x, y: Node | (y in x.(*(adj + adj')))\n}\n\n/*\nThe graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html\n*/\npred stonglyConnected {\n\n}\n\n/*\nThe graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html\n*/\npred transitive {\n\n}",
  "mapping": "APTED",
  "type": "ted",
  "isNewNode": true,
  "createdShorterPath": false,
  "sourceExpr": "all x, y: Node | (y in x.(*(adj + adj')))",
  "sourceAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{'{field/adj{set of{sig/Node}}}}{field/adj{set of{sig/Node}}}}}}}}}",
  "targetExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "targetAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "nextExpr": "all n1,n2:Node | n2 in n1.*(adj + ~adj)",
  "nextAST": "{all{one of{var0}{sig/Node}}{all{one of{var1}{sig/Node}}{in{var1/Node}{.{var0/Node}{*{+{field/adj{set of{sig/Node}}}{~{field/adj{set of{sig/Node}}}}}}}}}}",
  "totalTED": 2,
  "srcDstTED": 2,
  "operations": [
    "(type='Insert', node=~, parent=+, position=1)",
    "(type='Update', node=', value=field/adj)",
    "(type='Move', tree='{'{field/adj{set of{sig/Node}}}}', parent=~, position=0)",
    "(type='Update', node=field/adj, value=set of)",
    "(type='Update', node=set of, value=sig/Node)",
    "(type='Delete', node=sig/Node)"
  ],
  "hint": "Near a solution! Consider adding a transpose operator ('~') to transpose a relation. Think about how you can incorporate this within the union operator ('+') expression.",
  "time": "71",
  "model_id": "Z9k76imPBYnEyZT3o"
}]